swagger: '2.0'
info:
  title: Dana Backend REST API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
paths:
  /user:
    get:
      tags: [user]
      operationId: app.api.get_user
      summary: Return current user account details.
      responses:
        200:
          description: User Account Details
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              username:
                type: string
                example: "JohnDoe"
      security:
        - basic: []
    post:
      tags: [user]
      operationId: app.api.post_user
      summary: Create new user account
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
                format: username
              password:
                type: string
                format: secure_password
              email:
                type: string
                format: email
      responses:
        201:
          description: New user created
          schema:
            type: object
            properties:
              id:
                type: integer
              username:
                type: string
        409:
          description: Conflict exists, username taken.
  "/user/password":
    put:
      tags: [user]
      operationId: app.api.put_user_password
      summary: Update Password
      description: |
        The User Password endpoint allows an authenticated user to change their
        password. The new password **must** be strong, meeting the requirements detailed
        in the parameter description.
      parameters:
        - name: body
          in: body
          description: |
            Password must have 8 characters include at least on number, letter,
            and a special character (ie $@$!%*#?&).
          schema:
            type: object
            properties:
              password:
                type: string
                description: |
                  Minimum 8 character string including at least on number, letter,
                  and special character (ie $@$!%*#?&).
                format: secure_password
                example: "Xs2dfkj$"
                minLength: 8
            required:
              - password
      responses:
        200:
          description: Password updated
  "/user/info":
    put:
      tags: [user]
      operationId: app.api.put_user_info
      summary: Update user information
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
      responses:
        200:
          description: User information updated
  "/user/token":
    get:
      tags: [user]
      operationId: app.api.get_user_token
      summary: Generate JSON Web Token
      responses:
        201:
          description: New token Created
          schema:
            type: object
            properties:
              token:
                type: string
      security:
        - basic: []
  /communityresource:
    post:
      tags: [communityresource]
      operationId: app.api.post_communityresource_register
      summary: Create a new community resource
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              number:
                type: string
              name:
                type: string
              address:
                type: string
              contact_name:
                type: string
              email:
                type: string
                format: email
              phone_number:
                type: string
      responses:
        200:
          description: New community resource created
          schema:
            type: object
            properties:
              id:
                type: integer
              charity_number:
                type: integer
              name:
                type: string
              y:
                type: number
              x:
                type: number
              contact_name:
                type: string
              email:
                type: string
              phone_number:
                type: string
              verified:
                type: boolean
  "/communityresource/info":
    get:
      tags: [communityresource]
      operationId: app.api.get_communityresource_info
      summary: Returns a JSON object containing community resource info.
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              charity_number:
                type: string
                description: |
                  The number must exist in the system.
      responses:
        200:
          description: Community resource JSON returned
    put:
      tags: [communityresource]
      operationId: app.api.put_community_resource_edit
      summary: Edit an existing community resource
      description: |
        The community resource endpoint allows a user to edit an existing community resource. Currently the Backend method takes in all the community resource field values at once.
      parameters:
        - name: body
          in: body
          description: |
            The parameters for this function are- the number(id) of
            a community resource, the organization name, the address,
            the contact person's name, contact email address and the
            phone number of the contact person.
          schema:
            type: object
            properties:
              charity_number:
                type: string
                description: |
                  The number must exist in the system.
              name:
                type: string
                description: |
                  Name of the organization cannot be empty string.
              address:
                type: string
                description: |
                  The address of the community resource must exist.
              contact_name:
                type: string
                description: |
                  The name of a person cannot have non-alphabet
                  characters.
              email:
                type: string
                format: email
                description: |
                  Must have a proper email format - <name>@<domain>.<domain-suffix>
              phone_number:
                type: string
                description: |
                  The phone number has to be purely numeric and
                  of length 10. It has to start with 414 or 905
                  or 647 since we are currently focused on 
                  community resource centers in Toronto.
              address:
                type: string
                description: |
                  Must have proper address format.
              website:
                type: string
                description: |
                  Must have proper url format.
              image_uri:
                type: string
                description: |
                  Must have proper url format.
      responses:
        200:
          description: Community resource edited
      security:
        - basic: []

securityDefinitions:
  basic:
    type: basic
