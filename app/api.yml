swagger: '2.0'
info:
  title: Dana Project REST API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
paths:
  "/user":
    get:
      tags: [user]
      operationId: app.api.get_user
      summary: Returns current user account details.
      responses:
        200:
          description: User Account Details
          schema:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
                description: Unique user identifier.
              email:
                type: string
                example: "JohnDoe@example.com"
                description: Email address of user.
      security:
        - basic: []
    put:
      tags: [user]
      operationId: app.api.put_user
      summary: Update user information
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              email:
                example: "JohnDoe@example.com"
                type: string
      responses:
        200:
          description: User information updated
    post:
      tags: [user]
      operationId: app.api.post_user
      summary: Create new user account
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              email:
                example: "JohnDoe@example.com"
                description: Email used to verify account.
                type: string
                format: email
              password:
                example: "@#Dadjl3SD#ak3"
                description: Secure user password.
                type: string
                format: secure_password
      responses:
        201:
          description: New user created
          schema:
            type: object
            properties:
              id:
                type: integer
              email:
                type: string
        409:
          description: Conflict exists, email taken.
  "/user/password":
    put:
      tags: [user]
      operationId: app.api.put_user_password
      summary: Update Password
      description: |
        The User Password endpoint allows an authenticated user to change their
        password. The new password **must** be strong, meeting the requirements detailed
        in the parameter description.
      parameters:
        - name: body
          in: body
          description: |
            Password must have 8 characters include at least on number, letter,
            and a special character (ie $@$!%*#?&).
          schema:
            type: object
            properties:
              password:
                type: string
                description: |
                  Minimum 8 character string including at least on number, letter,
                  and special character (ie $@$!%*#?&).
                format: secure_password
                example: "Xs2dfkj$"
                minLength: 8
            required:
              - password
      responses:
        200:
          description: Password updated
  "/user/token":
    get:
      tags: [user]
      operationId: app.api.get_user_token
      summary: Generate JSON Web Token
      responses:
        201:
          description: New token Created
          schema:
            type: object
            properties:
              token:
                type: string
                description: Timed JSON web token which can be used for authentication in place of email/password.
      security:
        - basic: []
  "/communityresource":
    get:
      tags: [communityresource]
      operationId: app.api.get_communityresource_list
      summary: Returns community resources near a geographic point.
      parameters:
        - name: latitude
          in: query
          type: number
          required: true
          description: Latitude
        - name: longitude
          in: query
          type: number
          required: true
          description: Longitude
        - name: radius
          in: query
          type: number
          required: true
          description: Radius (Km)
      responses:
        200:
          description: Nearby community resource list JSON returned
          schema:
            type: array
            items:
              type: object
              properties:
                community_resource_id:
                  type: number
                  description: Unique community resource identifier.
                name:
                  type: string
                  description: Name of the community resource.
                  example: Scott's Mission
                address:
                  type: string
                  description: Address of the community resource.
                  example: 123 Yonge St. Toronto, On
                location:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
                        example: [43.70273, -79.3977]
                    type:
                      type: string
                      example: "Point"
                  description: |
                    Location of the community resource as a GeoJson point.
  "/communityresource/{community_resource_id}":
    get:
      tags: [communityresource]
      operationId: app.api.get_communityresource_detail
      summary: Returns information on a specific Community Resource.
      parameters:
        - name: community_resource_id
          in: path
          required: true
          type: integer
          description: Unique Community Resource identifier.
      responses:
        200:
          description: Information on a community resource.
  "/community":
    get:
      tags: [community]
      operationId: app.api.get_all_communities
      summary: Returns all information on all communities.
      responses:
        200:
          description: Community details.
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  description: Unique community identifier.
                name:
                  type: string
                  example: "Danforth"
                  description: The name of a community.
                boundaries:
                  type: object
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: array
                        example: [[[-79.464620648, 43.692155606]]]
                    type:
                      type: string
                      example: "MultiPolygon"
                  description: Boundaries of a community in GeoJson format.
  "/community/{coordinates}":
    get:
      tags: [community]
      operationId: app.api.get_community_surrounding
      summary: Returns the community containing the given set of coordinates.
      parameters:
        - name: coordinates
          in: path
          required: true
          type: string
          description: Coordinates in longitude, latitude format.
      responses:
        200:
          description: A community that surrounds the given coordinates.
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
                description: Unique community identifier.
              name:
                type: string
                example: "Danforth"
                description: The name of a community.
              boundaries:
                type: object
                properties:
                  coordinates:
                    type: array
                    items:
                      type: array
                      example: [[[-79.464620648, 43.692155606]]]
                  type:
                    type: string
                    example: "MultiPolygon"
                description: Boundaries of a community in GeoJson format.

securityDefinitions:
  basic:
    type: basic
